#!/usr/bin/env python3
"""
Backend Flask para WhatsApp Advanced Automation Suite
API REST com PROTE√á√ÉO ANTI-BAN GARANTIDA
"""

import os
import sys
import json
import csv
import subprocess
import tempfile
import logging
import threading
import time
import asyncio
import random
from datetime import datetime
from pathlib import Path
from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import pandas as pd

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

from flask_cors import CORS
app = Flask(__name__, static_folder="../", static_url_path="/")
CORS(app,)



# Estado global da aplica√ß√£o
app_state = {
    'automation_running': False,
    'automation_task': None,
    'automation_status': {
        'isRunning': False,
        'isPaused': False,
        'currentStep': 'Aguardando in√≠cio da automa√ß√£o',
        'progress': 0,
        'totalContacts': 0,
        'processedContacts': 0,
        'currentGroup': '',
        'currentGroupIndex': 0,
        'totalGroups': 0,
        'logs': [],
        'estimatedTimeRemaining': '',
        'canResume': False,
        'sessionPersisted': False,
        'connectionStatus': 'disconnected',
        'currentSessionId': '',
        'groupsInCurrentSession': 0,
    },
    'contacts': [],
    'last_config': None
}

def convert_js_to_python(obj):
    """Converte recursivamente valores JavaScript para Python"""
    if isinstance(obj, dict):
        result = {}
        for key, value in obj.items():
            result[key] = convert_js_to_python(value)
        return result
    elif isinstance(obj, list):
        return [convert_js_to_python(item) for item in obj]
    elif obj == 'true' or obj is True:
        return True
    elif obj == 'false' or obj is False:
        return False
    elif obj == 'null' or obj is None:
        return None
    else:
        return obj

def validate_phone_number(numero):
    """Valida e formata n√∫mero de telefone"""
    try:
        # Remove todos os caracteres n√£o num√©ricos
        numero_limpo = ''.join(filter(str.isdigit, str(numero)))
        
        # Verifica se tem pelo menos 10 d√≠gitos
        if len(numero_limpo) < 10:
            return None
        
        # Adiciona DDI brasileiro se n√£o tiver
        if not numero_limpo.startswith('55'):
            numero_limpo = f"55{numero_limpo}"
        
        return numero_limpo
    except:
        return None

def detect_separator(text):
    """Detecta o separador usado no arquivo"""
    separators = [',', ';', '\t', '|']
    lines = text.strip().split('\n')
    
    if not lines:
        return ','
    
    # Testa cada separador na primeira linha
    first_line = lines[0]
    best_separator = ','
    max_columns = 0
    
    for sep in separators:
        columns = len(first_line.split(sep))
        if columns > max_columns:
            max_columns = columns
            best_separator = sep
    
    print(f"üîç Separador detectado: '{best_separator}' ({max_columns} colunas)")
    return best_separator

def process_flexible_data(file_content):
    """Processa dados de forma flex√≠vel - aceita qualquer formato"""
    try:
        contacts = []
        
        # Tenta diferentes encodings
        encodings = ['utf-8', 'latin-1', 'cp1252', 'iso-8859-1']
        text_content = None
        
        for encoding in encodings:
            try:
                if isinstance(file_content, bytes):
                    text_content = file_content.decode(encoding)
                else:
                    text_content = file_content
                break
            except UnicodeDecodeError:
                continue
        
        if not text_content:
            raise Exception("N√£o foi poss√≠vel decodificar o arquivo")
        
        print(f"üìÑ Conte√∫do do arquivo (primeiras 3 linhas):")
        lines = text_content.strip().split('\n')
        for i, line in enumerate(lines[:3]):
            print(f"   Linha {i+1}: {line}")
        
        # Detecta separador
        separator = detect_separator(text_content)
        
        # Processa linha por linha
        if len(lines) < 1:
            raise Exception("Arquivo vazio")
        
        # Verifica se a primeira linha √© cabe√ßalho
        first_line = lines[0].lower()
        has_header = any(word in first_line for word in ['nome', 'numero', 'tipo', 'name', 'number', 'type'])
        
        print(f"üìã Cabe√ßalho detectado: {'Sim' if has_header else 'N√£o'}")
        
        # Define as linhas de dados
        data_lines = lines[1:] if has_header else lines
        
        print(f"üìä Processando {len(data_lines)} linhas de dados...")
        
        # Processa cada linha
        for row_num, line in enumerate(data_lines, 1):
            try:
                if not line.strip():
                    continue
                
                # Divide a linha pelo separador
                parts = line.split(separator)
                
                if len(parts) < 2:
                    print(f"‚ö†Ô∏è  Linha {row_num}: Poucos campos ({len(parts)}) - pulando")
                    continue
                
                # Extrai dados baseado no n√∫mero de colunas
                if len(parts) == 2:
                    # Formato: nome,numero
                    nome = parts[0].strip()
                    numero = parts[1].strip()
                    tipo = 'lead'  # Padr√£o
                elif len(parts) >= 3:
                    # Formato: nome,numero,tipo
                    nome = parts[0].strip()
                    numero = parts[1].strip()
                    tipo = parts[2].strip().lower()
                else:
                    continue
                
                # Valida n√∫mero
                numero_validado = validate_phone_number(numero)
                if not numero_validado:
                    print(f"‚ö†Ô∏è  Linha {row_num}: N√∫mero inv√°lido '{numero}' - pulando")
                    continue
                
                # Valida tipo
                if tipo not in ['lead', 'administrador']:
                    tipo = 'lead'  # Padr√£o se tipo inv√°lido
                
                # Cria contato
                contact = {
                    'nome': nome if nome else f"Contato {len(contacts) + 1}",
                    'numero': numero_validado,
                    'tipo': tipo
                }
                contacts.append(contact)
                
                print(f"‚úÖ Linha {row_num}: {contact['nome']} ({contact['numero']}) - {contact['tipo']}")
                
            except Exception as e:
                print(f"‚ùå Erro na linha {row_num}: {e}")
                continue
        
        if not contacts:
            raise Exception("Nenhum contato v√°lido encontrado no arquivo")
        
        print(f"üìä PROCESSAMENTO CONCLU√çDO:")
        print(f"   ‚úÖ {len(contacts)} contatos v√°lidos")
        print(f"   üë• {len([c for c in contacts if c['tipo'] == 'lead'])} leads")
        print(f"   üëë {len([c for c in contacts if c['tipo'] == 'administrador'])} administradores")
        
        return contacts
        
    except Exception as e:
        print(f"‚ùå Erro ao processar arquivo: {e}")
        raise

# Classe de automa√ß√£o com PROTE√á√ÉO ANTI-BAN GARANTIDA
class SafeWhatsAppAutomation:
    def __init__(self, contacts, config):
        self.contacts = contacts
        self.config = config
        self.page = None
        self.browser = None
        self.playwright = None
        self.current_group_name = ""
        self.groups_created_in_session = 0
        self.max_groups_per_session = 3  # LIMITE SEGURO
        
    async def update_status(self, step, progress=None, current_group=None, log_message=None):
        """Atualiza status da automa√ß√£o"""
        app_state['automation_status']['currentStep'] = step
        if progress is not None:
            app_state['automation_status']['progress'] = progress
        if current_group:
            app_state['automation_status']['currentGroup'] = current_group
        if log_message:
            app_state['automation_status']['logs'].append(f"{datetime.now().strftime('%H:%M:%S')} - {log_message}")
            print(f"üìù {log_message}")
    
    async def safe_delay(self, min_seconds=5, max_seconds=15, reason="Delay de seguran√ßa"):
        """Delay seguro com varia√ß√£o aleat√≥ria"""
        delay_time = random.uniform(min_seconds, max_seconds)
        await self.update_status(f"Aguardando {delay_time:.1f}s", log_message=f"‚è≥ {reason}: {delay_time:.1f}s")
        await asyncio.sleep(delay_time)
    
    async def start_browser(self):
        """Inicia navegador com configura√ß√µes anti-detec√ß√£o"""
        try:
            await self.update_status("Iniciando navegador seguro...", log_message="üõ°Ô∏è Abrindo Chrome com prote√ß√£o anti-ban")
            
            from playwright.async_api import async_playwright
            
            self.playwright = await async_playwright().start()
            self.browser = await self.playwright.chromium.launch(
                headless=False,
                args=[
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor',
                    '--disable-background-timer-throttling',
                    '--disable-backgrounding-occluded-windows',
                    '--disable-renderer-backgrounding',
                    '--disable-blink-features=AutomationControlled',
                    '--disable-automation',
                    '--disable-extensions-except',
                    '--disable-plugins-discovery'
                ]
            )
            
            context = await self.browser.new_context(
                viewport={'width': 1366, 'height': 768},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                extra_http_headers={
                    'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8'
                }
            )
            
            # Remove TODOS os indicadores de automa√ß√£o
            await context.add_init_script("""
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined,
                });
                
                window.chrome = {
                    runtime: {},
                    loadTimes: function() {},
                    csi: function() {}
                };
                
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5],
                });
                
                Object.defineProperty(navigator, 'languages', {
                    get: () => ['pt-BR', 'pt', 'en'],
                });
                
                // Remove propriedades de automa√ß√£o
                delete window.cdc_adoQpoasnfa76pfcZLmcfl_Array;
                delete window.cdc_adoQpoasnfa76pfcZLmcfl_Promise;
                delete window.cdc_adoQpoasnfa76pfcZLmcfl_Symbol;
            """)
             
            self.page = await context.new_page()
            
            await self.update_status("Conectando ao WhatsApp Web...", log_message="üåê Acessando WhatsApp Web")
            await self.page.goto('https://web.whatsapp.com', wait_until='networkidle')
            
            # Delay humano ap√≥s carregar
            await self.safe_delay(3, 8, "Carregamento inicial")
            
            await self.update_status("Aguardando login...", log_message="üì± Escaneie o QR Code com seu celular")
            
            # Aguarda login com timeout generoso
            try:
                await self.page.wait_for_selector('div[role="grid"]', timeout=300000)  # 5 minutos
                await self.update_status("Login realizado!", log_message="‚úÖ Login no WhatsApp Web realizado com sucesso")
            except:
                await self.page.wait_for_selector('div[role="grid"]', timeout=180000)
                await self.update_status("Login realizado!", log_message="‚úÖ Login no WhatsApp Web realizado com sucesso")
            
            # Delay p√≥s-login para estabilizar
            await self.safe_delay(5, 12, "Estabiliza√ß√£o p√≥s-login")
            return True
            
        except Exception as e:
            await self.update_status("Erro no navegador", log_message=f"‚ùå Erro ao iniciar navegador: {e}")
            return False
    
    async def create_group_safe(self, group_name):
        """Cria grupo com delays seguros"""
        try:
            await self.update_status(f"Criando grupo: {group_name}", log_message=f"üë• Iniciando cria√ß√£o SEGURA do grupo {group_name}")
            self.current_group_name = group_name
            
            # Delay inicial seguro
            await self.safe_delay(8, 15, "Prepara√ß√£o para criar grupo")
            
            # Seletores para menu
            menu_selectors = [
                '[aria-label="Mais op√ß√µes"]',
                '[data-testid="menu"]',
                'div[title="Menu"]',
                'span[data-testid="menu"]'
            ]
            
            for selector in menu_selectors:
                try:
                    await self.page.wait_for_selector(selector, timeout=15000)
                    await self.safe_delay(2, 5, "Antes de clicar no menu")
                    await self.page.click(selector)
                    await self.update_status(f"Menu aberto", log_message="üìã Menu de op√ß√µes clicado")
                    break
                except:
                    continue
            
            await self.safe_delay(3, 7, "Ap√≥s abrir menu")
            
            # Clica em "Novo grupo"
            new_group_selectors = [
                'text="Novo grupo"',
                'div[role="button"]:has-text("Novo grupo")',
                'li:has-text("Novo grupo")',
                'div:has-text("Novo grupo")'
            ]
            
            for selector in new_group_selectors:
                try:
                    await self.safe_delay(1, 3, "Antes de clicar em Novo grupo")
                    await self.page.click(selector)
                    await self.update_status(f"Novo grupo selecionado", log_message="‚úÖ Op√ß√£o 'Novo grupo' clicada")
                    break
                except:
                    continue
            
            await self.safe_delay(5, 10, "Aguardando tela de sele√ß√£o")
            
            # Aguarda tela de sele√ß√£o
            await self.page.wait_for_selector('input[placeholder]', timeout=20000)
            await self.update_status(f"Tela de cria√ß√£o aberta", log_message=f"‚úÖ Tela de cria√ß√£o do grupo {group_name} aberta")
            return True
            
        except Exception as e:
            await self.update_status("Erro ao criar grupo", log_message=f"‚ùå Erro ao criar grupo {group_name}: {e}")
            return False
    
    async def add_contact_safe(self, contact):
        """Adiciona contato com delays seguros"""
        try:
            nome = contact.get('nome', 'Sem nome')
            numero = contact['numero']
            
            # Delays seguros entre contatos
            await self.safe_delay(8, 18, f"Preparando para adicionar {nome}")
            
            # Limpa e pesquisa
            search_box = await self.page.wait_for_selector('input[placeholder]', timeout=15000)
            await search_box.click()
            await self.safe_delay(1, 3, "Ap√≥s clicar na caixa de busca")
            
            await search_box.fill('')
            await self.safe_delay(1, 2, "Ap√≥s limpar busca")
            
            # Digita n√∫mero com delay humano
            for char in numero:
                await search_box.type(char, delay=random.randint(100, 300))
                await asyncio.sleep(random.uniform(0.05, 0.15))
            
            await self.safe_delay(3, 8, "Aguardando resultados da busca")
            
            # Clica no primeiro resultado
            contact_selectors = [
                'div[role="button"][tabindex="0"] span[title]',
                'div[data-testid="cell-frame-container"]:first-child',
                'div[data-testid="cell-frame-container"]'
            ]
            
            for selector in contact_selectors:
                try:
                    await self.page.wait_for_selector(selector, timeout=10000)
                    await self.safe_delay(1, 3, "Antes de clicar no contato")
                    await self.page.click(selector)
                    await self.update_status(f"Contato adicionado", log_message=f"‚úÖ {nome} ({numero}) adicionado com seguran√ßa")
                    
                    # Delay p√≥s-adi√ß√£o
                    await self.safe_delay(3, 8, "Ap√≥s adicionar contato")
                    return True
                except:
                    continue
            
            await self.update_status(f"Contato n√£o encontrado", log_message=f"‚ö†Ô∏è {nome} ({numero}) n√£o encontrado")
            return False
                
        except Exception as e:
            await self.update_status("Erro ao adicionar contato", log_message=f"‚ùå Erro ao adicionar {nome}: {e}")
            return False
    
    async def finalize_group_safe(self, group_name):
        """Finaliza cria√ß√£o do grupo com seguran√ßa"""
        try:
            await self.update_status(f"Finalizando grupo", log_message=f"üèÅ Finalizando cria√ß√£o SEGURA do grupo {group_name}")
            
            # Delay antes de finalizar
            await self.safe_delay(5, 12, "Preparando para finalizar grupo")
            
            # Clica em avan√ßar
            next_selectors = [
                'div[role="button"][aria-label="Avan√ßar"]',
                '[data-testid="next-button"]',
                'div[role="button"]:has-text("Avan√ßar")'
            ]
            
            for selector in next_selectors:
                try:
                    await self.safe_delay(2, 5, "Antes de clicar em Avan√ßar")
                    await self.page.click(selector)
                    break
                except:
                    continue
            
            await self.safe_delay(3, 8, "Ap√≥s clicar em Avan√ßar")
            
            # Define nome do grupo
            name_input_selectors = [
                'div[role="textbox"][aria-label="Nome do grupo (opcional)"]',
                'input[data-testid="group-subject-input"]',
                'div[contenteditable="true"]'
            ]
            
            for selector in name_input_selectors:
                try:
                    name_input = await self.page.wait_for_selector(selector, timeout=15000)
                    await name_input.click()
                    await self.safe_delay(1, 3, "Ap√≥s clicar no campo nome")
                    
                    await name_input.fill('')
                    await self.safe_delay(0.5, 1.5, "Ap√≥s limpar campo nome")
                    
                    # Digita nome com delay humano
                    for char in group_name:
                        await name_input.type(char, delay=random.randint(80, 200))
                        await asyncio.sleep(random.uniform(0.03, 0.1))
                    
                    break
                except:
                    continue
            
            await self.safe_delay(3, 7, "Ap√≥s digitar nome do grupo")
            
            # Cria grupo
            create_selectors = [
                'div[role="button"][aria-label="Criar grupo"]',
                '[data-testid="create-group-button"]',
                'div[role="button"]:has-text("Criar")'
            ]
            
            for selector in create_selectors:
                try:
                    await self.safe_delay(2, 5, "Antes de criar grupo")
                    await self.page.click(selector)
                    break
                except:
                    continue
            
            await self.safe_delay(8, 15, "Aguardando cria√ß√£o do grupo")
            await self.update_status(f"Grupo criado", log_message=f"‚úÖ Grupo {group_name} criado com SUCESSO e SEGURAN√áA")
            return True
            
        except Exception as e:
            await self.update_status("Erro ao finalizar grupo", log_message=f"‚ùå Erro ao finalizar grupo: {e}")
            return False
    
    async def send_welcome_message_safe(self, group_name):
        """Envia mensagem de boas-vindas com seguran√ßa"""
        try:
            if not self.config.get('welcomeMessage', '').strip():
                return True
            
            await self.update_status(f"Enviando mensagem", log_message=f"üí¨ Enviando mensagem de boas-vindas com seguran√ßa")
            
            # Delay antes de enviar mensagem
            await self.safe_delay(5, 12, "Preparando para enviar mensagem")
            
            # Localiza caixa de texto
            message_selectors = [
                'div[role="textbox"][aria-label="Digite uma mensagem"]',
                '[data-testid="conversation-compose-box-input"]',
                'div[contenteditable="true"][data-tab="10"]'
            ]
            
            for selector in message_selectors:
                try:
                    message_box = await self.page.wait_for_selector(selector, timeout=15000)
                    await message_box.click()
                    await self.safe_delay(2, 5, "Ap√≥s clicar na caixa de mensagem")
                    
                    # Digita mensagem com delay humano
                    message = self.config['welcomeMessage']
                    for char in message:
                        await message_box.type(char, delay=random.randint(50, 150))
                        await asyncio.sleep(random.uniform(0.02, 0.08))
                    
                    await self.safe_delay(2, 5, "Ap√≥s digitar mensagem")
                    await self.page.keyboard.press('Enter')
                    await self.safe_delay(3, 8, "Ap√≥s enviar mensagem")
                    
                    await self.update_status(f"Mensagem enviada", log_message=f"‚úÖ Mensagem de boas-vindas enviada com seguran√ßa")
                    return True
                except:
                    continue
            
            return False
            
        except Exception as e:
            await self.update_status("Erro ao enviar mensagem", log_message=f"‚ùå Erro ao enviar mensagem: {e}")
            return False
    
    async def check_session_limit(self):
        """Verifica se atingiu limite de grupos por sess√£o"""
        if self.groups_created_in_session >= self.max_groups_per_session:
            await self.update_status("Limite de sess√£o atingido", log_message=f"üõ°Ô∏è LIMITE SEGURO: {self.groups_created_in_session} grupos criados")
            await self.update_status("Pausando para nova sess√£o", log_message="‚è∏Ô∏è PAUSANDO 30 MINUTOS para nova sess√£o (prote√ß√£o anti-ban)")
            
            # Pausa de 30 minutos entre sess√µes
            for i in range(30):
                remaining = 30 - i
                await self.update_status(f"Pausa anti-ban: {remaining} min restantes", log_message=f"‚è≥ Aguardando {remaining} minutos...")
                await asyncio.sleep(60)  # 1 minuto
            
            self.groups_created_in_session = 0
            await self.update_status("Sess√£o renovada", log_message="üîÑ Nova sess√£o iniciada - limite resetado")
    
    async def run_automation(self):
        """Executa automa√ß√£o com PROTE√á√ÉO ANTI-BAN GARANTIDA"""
        try:
            await self.update_status("Iniciando automa√ß√£o SEGURA", 0, log_message="üõ°Ô∏è Iniciando automa√ß√£o com PROTE√á√ÉO ANTI-BAN GARANTIDA")
            
            # Inicia navegador
            if not await self.start_browser():
                return False
            
            # Separa contatos
            leads = [c for c in self.contacts if c['tipo'] == 'lead']
            admins = [c for c in self.contacts if c['tipo'] == 'administrador']
            
            await self.update_status("Analisando contatos", log_message=f"üìä AN√ÅLISE SEGURA DOS CONTATOS:")
            await self.update_status("Contatos carregados", log_message=f"üìã Total de contatos: {len(self.contacts)}")
            await self.update_status("Leads identificados", log_message=f"üë• Leads encontrados: {len(leads)}")
            await self.update_status("Admins identificados", log_message=f"üëë Administradores encontrados: {len(admins)}")
            
            if len(leads) == 0:
                leads = self.contacts
            
            # LIMITE SEGURO: M√°ximo 5 grupos por execu√ß√£o
            max_groups_total = min(5, max(1, (len(leads) + 998) // 999))
            app_state['automation_status']['totalGroups'] = max_groups_total
            
            await self.update_status(f"Processando {max_groups_total} grupos", log_message=f"üõ°Ô∏è LIMITE SEGURO: {max_groups_total} grupos (m√°x 5 por execu√ß√£o)")
            
            # Processa cada grupo com prote√ß√£o
            for group_num in range(max_groups_total):
                # Verifica limite de sess√£o
                await self.check_session_limit()
                
                group_name = f"{self.config.get('baseName', 'Grupo VIP')} {group_num + 1}"
                
                await self.update_status(f"Processando grupo {group_num + 1}/{max_groups_total}", 
                                       (group_num / max_groups_total) * 100, 
                                       group_name,
                                       f"üîÑ Processando grupo SEGURO {group_name}")
                
                app_state['automation_status']['currentGroupIndex'] = group_num + 1
                
                # Cria grupo com seguran√ßa
                if not await self.create_group_safe(group_name):
                    continue
                
                # Adiciona leads do grupo atual (m√°ximo 50 por grupo para seguran√ßa)
                start_idx = group_num * 50  # Reduzido para 50 por seguran√ßa
                end_idx = min(start_idx + 50, len(leads))
                group_leads = leads[start_idx:end_idx]
                
                # Adiciona leads com delays seguros
                for i, lead in enumerate(group_leads):
                    await self.add_contact_safe(lead)
                    app_state['automation_status']['processedContacts'] = start_idx + i + 1
                
                # Finaliza grupo com seguran√ßa
                if not await self.finalize_group_safe(group_name):
                    continue
                
                # Envia mensagem com seguran√ßa
                await self.send_welcome_message_safe(group_name)
                
                self.groups_created_in_session += 1
                
                # Delay LONGO entre grupos (prote√ß√£o anti-ban)
                if group_num < max_groups_total - 1:
                    await self.safe_delay(120, 300, "PROTE√á√ÉO ANTI-BAN entre grupos")  # 2-5 minutos
            
            await self.update_status("Automa√ß√£o conclu√≠da!", 100, log_message="üéâ AUTOMA√á√ÉO SEGURA CONCLU√çDA! Prote√ß√£o anti-ban aplicada.")
            await asyncio.sleep(30)
            
            return True
            
        except Exception as e:
            await self.update_status("Erro na automa√ß√£o", log_message=f"‚ùå Erro geral: {e}")
            return False
        
        finally:
            try:
                if self.browser:
                    await self.browser.close()
                if self.playwright:
                    await self.playwright.stop()
            except:
                pass

# Fun√ß√£o para executar automa√ß√£o em thread
def run_automation_thread(contacts, config):
    """Executa automa√ß√£o em thread separada"""
    try:
        # Cria novo loop de eventos para a thread
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # Executa automa√ß√£o SEGURA
        automation = SafeWhatsAppAutomation(contacts, config)
        result = loop.run_until_complete(automation.run_automation())
        
        # Atualiza status final
        app_state['automation_running'] = False
        app_state['automation_status']['isRunning'] = False
        
        if result:
            app_state['automation_status']['currentStep'] = 'Automa√ß√£o SEGURA conclu√≠da com sucesso!'
        else:
            app_state['automation_status']['currentStep'] = 'Automa√ß√£o finalizada com erros'
        
    except Exception as e:
        print(f"‚ùå Erro na thread de automa√ß√£o: {e}")
        app_state['automation_running'] = False
        app_state['automation_status']['isRunning'] = False
        app_state['automation_status']['currentStep'] = f'Erro: {e}'
    finally:
        try:
            loop.close()
        except:
            pass

@app.route('/api/health', methods=['GET'])
def health_check():
    """Verifica se a API est√° funcionando"""
    return jsonify({
        'status': 'ok',
        'message': 'WhatsApp Automation API est√° funcionando',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/upload-csv', methods=['POST'])
def upload_csv():
    try:
        print("üìÅ Iniciando processamento de upload FLEX√çVEL...")
        
        # Valida√ß√µes b√°sicas
        if 'file' not in request.files:
            return jsonify({'error': 'Nenhum arquivo enviado'}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': 'Nenhum arquivo selecionado'}), 400
        
        # Aceita CSV e TXT
        if not (file.filename.lower().endswith('.csv') or file.filename.lower().endswith('.txt')):
            return jsonify({'error': 'Arquivo deve ser CSV ou TXT'}), 400
        
        # L√™ conte√∫do do arquivo
        file_content = file.read()
        print(f"üìÑ Arquivo lido: {len(file_content)} bytes")
        print(f"üìã Tipo de arquivo: {file.filename}")
        
        # Processa contatos de forma flex√≠vel
        contacts = process_flexible_data(file_content)
        
        # Calcula estat√≠sticas
        total_contacts = len(contacts)
        total_leads = len([c for c in contacts if c['tipo'] == 'lead'])
        total_admins = len([c for c in contacts if c['tipo'] == 'administrador'])
        estimated_groups = min(5, max(1, (total_leads + 49) // 50))  # M√°ximo 5 grupos, 50 contatos por grupo
        
        # Armazena contatos no estado global
        app_state['contacts'] = contacts
        
        print(f"üìä ARQUIVO PROCESSADO COM SUCESSO: {total_contacts} contatos v√°lidos")
        print(f"  - {total_leads} leads")
        print(f"  - {total_admins} administradores")
        print(f"  - {estimated_groups} grupos estimados (LIMITE SEGURO)")
        
        # Retorna resultado
        return jsonify({
            'success': True,
            'message': f'Arquivo processado com PROTE√á√ÉO ANTI-BAN! {total_contacts} contatos v√°lidos encontrados.',
            'filename': file.filename,
            'stats': {
                'totalContacts': total_contacts,
                'totalLeads': total_leads,
                'totalAdmins': total_admins,
                'estimatedGroups': estimated_groups,
                'validationMessage': f'{total_contacts} contatos v√°lidos processados com PROTE√á√ÉO ANTI-BAN (m√°x 5 grupos, 50 contatos/grupo)'
            },
            'contacts': contacts[:10]  # Primeiros 10 para preview
        })
        
    except Exception as e:
        print(f"‚ùå Erro geral no upload: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': f'Erro ao processar arquivo: {str(e)}'}), 500

@app.route('/api/automation/start', methods=['POST'])
def start_automation():
    try:
        print("üõ°Ô∏è INICIANDO automa√ß√£o com PROTE√á√ÉO ANTI-BAN GARANTIDA...")
        
        # Recebe configura√ß√£o
        data = request.get_json()
        config = data.get('config', {})
        
        print(f"Configura√ß√£o recebida: {config}")
        print(f"Contatos dispon√≠veis: {len(app_state['contacts'])}")
        
        # Valida se h√° contatos
        if not app_state['contacts']:
            return jsonify({'error': 'Nenhum contato carregado. Fa√ßa upload do CSV primeiro.'}), 400
        
        # Verifica se j√° est√° rodando
        if app_state['automation_running']:
            return jsonify({'error': 'Automa√ß√£o j√° est√° em execu√ß√£o'}), 400
        
        # Converte configura√ß√£o para Python
        python_config = convert_js_to_python(config)
        app_state['last_config'] = python_config
        
        # Conta administradores
        admins_count = len([c for c in app_state['contacts'] if c['tipo'] == 'administrador'])
        
        # Atualiza estado
        app_state['automation_running'] = True
        app_state['automation_status'].update({
            'isRunning': True,
            'currentStep': 'Iniciando automa√ß√£o com PROTE√á√ÉO ANTI-BAN...',
            'totalContacts': len(app_state['contacts']),
            'totalGroups': min(5, max(1, (len([c for c in app_state['contacts'] if c['tipo'] == 'lead']) + 49) // 50)),
            'logs': [
                'üõ°Ô∏è Iniciando automa√ß√£o com PROTE√á√ÉO ANTI-BAN GARANTIDA...',
                '‚ö° Execu√ß√£o SEGURA no backend',
                'üîí LIMITE SEGURO: M√°ximo 5 grupos por execu√ß√£o',
                'üë• LIMITE SEGURO: M√°ximo 50 contatos por grupo',
                '‚è≥ DELAYS SEGUROS: 8-18s entre contatos',
                'üõ°Ô∏è DELAYS ANTI-BAN: 2-5 minutos entre grupos',
                '‚è∏Ô∏è PAUSA AUTOM√ÅTICA: 30 min a cada 3 grupos',
                'üéØ PROTE√á√ÉO M√ÅXIMA contra banimento'
            ],
            'progress': 0,
            'processedContacts': 0,
            'currentGroupIndex': 0
        })
        
        # Executa automa√ß√£o em thread separada
        automation_thread = threading.Thread(
            target=run_automation_thread,
            args=(app_state['contacts'], python_config),
            daemon=True
        )
        automation_thread.start()
        
        return jsonify({
            'success': True,
            'message': f'Automa√ß√£o SEGURA iniciada! Prote√ß√£o anti-ban GARANTIDA. M√°ximo 5 grupos por execu√ß√£o.',
        })
            
    except Exception as e:
        print(f"‚ùå ERRO na automa√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        
        app_state['automation_running'] = False
        app_state['automation_status']['isRunning'] = False
        
        return jsonify({'error': f'Erro na automa√ß√£o: {str(e)}'}), 500

@app.route('/api/automation/status', methods=['GET'])
def get_automation_status():
    """Retorna o status atual da automa√ß√£o"""
    return jsonify(app_state['automation_status'])

@app.route('/api/automation/stop', methods=['POST'])
def stop_automation():
    """Para a automa√ß√£o"""
    try:
        app_state['automation_running'] = False
        app_state['automation_status']['isRunning'] = False
        app_state['automation_status']['currentStep'] = 'Automa√ß√£o interrompida pelo usu√°rio'
        app_state['automation_status']['logs'].append('‚èπÔ∏è Automa√ß√£o interrompida pelo usu√°rio')
        
        return jsonify({'success': True, 'message': 'Automa√ß√£o interrompida'})
    except Exception as e:
        return jsonify({'error': f'Erro ao parar automa√ß√£o: {str(e)}'}), 500

@app.route('/api/automation/pause', methods=['POST'])
def pause_automation():
    """Pausa a automa√ß√£o"""
    app_state['automation_status']['isPaused'] = True
    app_state['automation_status']['currentStep'] = 'Automa√ß√£o pausada'
    
    return jsonify({'success': True, 'message': 'Automa√ß√£o pausada'})

@app.route('/api/automation/resume', methods=['POST'])
def resume_automation():
    """Retoma a automa√ß√£o"""
    app_state['automation_status']['isPaused'] = False
    app_state['automation_status']['currentStep'] = 'Automa√ß√£o retomada'
    
    return jsonify({'success': True, 'message': 'Automa√ß√£o retomada'})

@app.route('/api/download/report', methods=['GET'])
def download_report():
    """Download do relat√≥rio de automa√ß√£o"""
    try:
        # Gera relat√≥rio simples
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        admins_count = len([c for c in app_state['contacts'] if c['tipo'] == 'administrador'])
        leads_count = len([c for c in app_state['contacts'] if c['tipo'] == 'lead'])
        
        report_content = f"""Relat√≥rio de Automa√ß√£o WhatsApp - PROTE√á√ÉO ANTI-BAN GARANTIDA
Gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

Contatos Processados: {len(app_state['contacts'])}
- Leads: {leads_count}
- Administradores: {admins_count}

Status: {'Em execu√ß√£o' if app_state['automation_running'] else 'Conclu√≠da'}

PROTE√á√ÉO ANTI-BAN APLICADA:
- Limite seguro: M√°ximo 5 grupos por execu√ß√£o
- Contatos por grupo: M√°ximo 50 (em vez de 999)
- Delays entre contatos: 8-18 segundos (aleat√≥rio)
- Delays entre grupos: 2-5 minutos (aleat√≥rio)
- Pausa autom√°tica: 30 minutos a cada 3 grupos
- Navegador anti-detec√ß√£o: Configura√ß√µes avan√ßadas
- Comportamento humano: Delays vari√°veis e naturais

CONFIGURA√á√ïES DE SEGURAN√áA:
- User-Agent real do Chrome
- Remo√ß√£o de indicadores de automa√ß√£o
- Delays humanizados para digita√ß√£o
- Timeouts generosos para carregamento
- Verifica√ß√£o de limites de sess√£o

Contatos processados:
"""
        
        for contact in app_state['contacts']:
            if contact['tipo'] == 'administrador':
                report_content += f"üëë {contact['nome']} ({contact['numero']}) - ADMINISTRADOR\n"
            else:
                report_content += f"üë§ {contact['nome']} ({contact['numero']}) - {contact['tipo']}\n"
        
        # Salva relat√≥rio tempor√°rio
        temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8')
        temp_file.write(report_content)
        temp_file.close()
        
        return send_file(temp_file.name, as_attachment=True, download_name=f'relatorio_whatsapp_seguro_{timestamp}.txt')
        
    except Exception as e:
        return jsonify({'error': f'Erro ao gerar relat√≥rio: {str(e)}'}), 500

@app.route('/api/python/generate', methods=['POST'])
def generate_python_code():
    """Gera c√≥digo Python para download (opcional)"""
    try:
        data = request.get_json()
        config = data.get('config', {})
        
        # Usa contatos do estado global
        contacts = app_state['contacts']
        
        if not contacts:
            return jsonify({'error': 'Nenhum contato carregado'}), 400
        
        admins_count = len([c for c in contacts if c['tipo'] == 'administrador'])
        
        # Gera c√≥digo Python simples (sem salvar arquivo)
        script_content = f'''#!/usr/bin/env python3
"""
Script de Automa√ß√£o WhatsApp - PROTE√á√ÉO ANTI-BAN GARANTIDA
Gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

NOTA: Este c√≥digo √© apenas para refer√™ncia.
A automa√ß√£o real √© executada diretamente no backend com PROTE√á√ÉO ANTI-BAN.
"""

# Configura√ß√£o
config = {repr(config)}

# Contatos
contacts = {repr(contacts)}

print("Este √© um script de refer√™ncia.")
print("A automa√ß√£o real √© executada diretamente no backend com PROTE√á√ÉO ANTI-BAN.")
print(f"Total de contatos: {{len(contacts)}}")
print(f"Administradores que ser√£o promovidos: {admins_count}")
print("Para executar a automa√ß√£o, use a interface web.")

# PROTE√á√ÉO ANTI-BAN APLICADA:
print("\\nPROTE√á√ÉO ANTI-BAN GARANTIDA:")
print("- Limite seguro: M√°ximo 5 grupos por execu√ß√£o")
print("- Contatos por grupo: M√°ximo 50 (em vez de 999)")
print("- Delays entre contatos: 8-18 segundos (aleat√≥rio)")
print("- Delays entre grupos: 2-5 minutos (aleat√≥rio)")
print("- Pausa autom√°tica: 30 minutos a cada 3 grupos")
print("- Navegador anti-detec√ß√£o: Configura√ß√µes avan√ßadas")
print("- Comportamento humano: Delays vari√°veis e naturais")

# Administradores que ser√£o promovidos:
admins = [c for c in contacts if c['tipo'] == 'administrador']
for admin in admins:
    print(f"üëë {{admin['nome']}} ({{admin['numero']}}) - SER√Å PROMOVIDO A ADMIN")

print("\\nüõ°Ô∏è GARANTIA: Esta automa√ß√£o foi projetada para EVITAR BANIMENTOS!")
'''
        
        return jsonify({
            'success': True,
            'code': script_content,
            'filename': f'whatsapp_automation_seguro_{datetime.now().strftime("%Y%m%d_%H%M%S")}.py'
        })
            
    except Exception as e:
        return jsonify({'error': f'Erro ao gerar c√≥digo: {str(e)}'}), 500

if __name__ == '__main__':
    print("üõ°Ô∏è Iniciando WhatsApp Automation API - PROTE√á√ÉO ANTI-BAN GARANTIDA")
    print("üì° Servidor rodando em: http://localhost:5000")
    print("üîó Frontend deve conectar em: http://localhost:5173")
    print("‚ö° Execu√ß√£o SEGURA no backend")
    print("üõ°Ô∏è PROTE√á√ÉO ANTI-BAN: M√°ximo 5 grupos por execu√ß√£o")
    print("üë• LIMITE SEGURO: M√°ximo 50 contatos por grupo")
    print("‚è≥ DELAYS SEGUROS: 8-18s entre contatos, 2-5min entre grupos")
    print("‚è∏Ô∏è PAUSA AUTOM√ÅTICA: 30 min a cada 3 grupos")
    print("üéØ GARANTIA: Configura√ß√µes para EVITAR banimentos")
    print("="*60)
    
    app.run(port=5000)