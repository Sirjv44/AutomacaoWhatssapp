#!/usr/bin/env python3
"""
WhatsApp Advanced Group Automation Tool with Anti-Ban Protection
Ferramenta avan√ßada de automa√ß√£o para cria√ß√£o de grupos no WhatsApp Web
Desenvolvido com Playwright + Python com prote√ß√£o anti-banimento

Recursos Avan√ßados:
- Prote√ß√£o anti-banimento com delays inteligentes
- Controle de sess√£o e retomada autom√°tica
- Backup cont√≠nuo do progresso
- Detec√ß√£o de desconex√£o e reconex√£o
- Processamento de milhares de contatos com seguran√ßa
- Relat√≥rios detalhados em CSV e JSON

Requisitos:
- Python 3.8+
- pip install playwright pandas asyncio
- playwright install chromium

Uso:
1. Execute: python whatsapp_advanced_automation.py
2. Escaneie o QR Code quando solicitado
3. Aguarde o processamento autom√°tico com prote√ß√£o anti-ban
"""

import asyncio
import json
import time
import csv
import math
import random
import os
from datetime import datetime, timedelta
from pathlib import Path
from playwright.async_api import async_playwright
import logging

# Configura√ß√£o de logging avan√ßada
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('whatsapp_advanced_automation.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class WhatsAppAdvancedAutomation:
    def __init__(self):
        self.page = None
        self.browser = None
        self.playwright = None
        self.reports = []
        self.start_time = None
        self.session_id = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.backup_file = f"backup_{self.session_id}.json"
        self.groups_in_current_session = 0
        self.connection_lost = False
        
        # Configura√ß√µes padr√£o com prote√ß√£o anti-ban
        self.config = {
            'base_name': 'Grupo VIP',
            'max_members': 999,
            'delay': {'min': 2, 'max': 6},
            'group_delay': {'min': 30, 'max': 90},
            'create_multiple': True,
            'welcome_message': 'Bem-vindos ao nosso grupo! üéâ\n\nEste √© um espa√ßo para compartilharmos informa√ß√µes importantes e mantermos contato.\n\nObrigado por fazer parte da nossa comunidade! üë•',
            'enable_ban_prevention': True,
            'max_groups_per_session': 10,
            'enable_scheduling': False,
            'scheduled_datetime': ''
        }
        
        # Contatos ser√£o carregados do CSV
        self.contacts = []
        
        logger.info(f"üõ°Ô∏è  Automa√ß√£o avan√ßada com prote√ß√£o anti-ban inicializada")
        logger.info(f"   üÜî Sess√£o: {self.session_id}")
        logger.info(f"   üõ°Ô∏è  Prote√ß√£o anti-ban: {'Ativada' if self.config['enable_ban_prevention'] else 'Desativada'}")
    
    def load_contacts_from_csv(self, csv_file_path):
        """Carrega contatos do arquivo CSV"""
        try:
            contacts = []
            with open(csv_file_path, 'r', encoding='utf-8') as file:
                csv_reader = csv.DictReader(file)
                for row in csv_reader:
                    contact = {
                        'nome': row.get('nome', '').strip() or None,
                        'numero': row['numero'].strip(),
                        'tipo': row['tipo'].strip().lower()
                    }
                    
                    # Valida tipo
                    if contact['tipo'] not in ['lead', 'administrador']:
                        logger.warning(f"‚ö†Ô∏è  Tipo inv√°lido para {contact['numero']}: {contact['tipo']}")
                        continue
                    
                    # Garante formato do n√∫mero com DDI
                    numero = contact['numero'].replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
                    if not numero.startswith('55'):
                        numero = f"55{numero}"
                    contact['numero'] = numero
                    
                    contacts.append(contact)
            
            self.contacts = contacts
            logger.info(f"üìÅ {len(contacts)} contatos carregados do CSV")
            
            # Calcula estat√≠sticas
            leads = [c for c in contacts if c['tipo'] == 'lead']
            admins = [c for c in contacts if c['tipo'] == 'administrador']
            estimated_groups = math.ceil(len(leads) / self.config['max_members'])
            
            logger.info(f"   üë• {len(leads)} leads")
            logger.info(f"   üëë {len(admins)} administradores")
            logger.info(f"   üìã {estimated_groups} grupos estimados")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar CSV: {e}")
            return False
    
    def save_backup(self, current_group_index=0, current_contact_index=0):
        """Salva backup do progresso atual"""
        try:
            backup_data = {
                'session_id': self.session_id,
                'timestamp': datetime.now().isoformat(),
                'config': self.config,
                'current_group_index': current_group_index,
                'current_contact_index': current_contact_index,
                'groups_in_current_session': self.groups_in_current_session,
                'reports': self.reports,
                'connection_lost': self.connection_lost
            }
            
            with open(self.backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ Backup salvo: {self.backup_file}")
            return True
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar backup: {e}")
            return False
    
    def load_backup(self):
        """Carrega backup anterior se existir"""
        try:
            backup_files = [f for f in os.listdir('.') if f.startswith('backup_session_') and f.endswith('.json')]
            if backup_files:
                # Pega o backup mais recente
                latest_backup = max(backup_files, key=os.path.getctime)
                
                with open(latest_backup, 'r', encoding='utf-8') as f:
                    backup_data = json.load(f)
                
                logger.info(f"üìÇ Backup encontrado: {backup_data['timestamp']}")
                return backup_data
            return None
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar backup: {e}")
            return None
    
    def calculate_batch_groups(self):
        """Calcula e organiza os grupos em lotes para processamento com prote√ß√£o anti-ban"""
        leads = [c for c in self.contacts if c['tipo'] == 'lead']
        admins = [c for c in self.contacts if c['tipo'] == 'administrador']
        
        # Calcula n√∫mero de grupos necess√°rios baseado nos leads
        groups_needed = math.ceil(len(leads) / self.config['max_members'])
        
        batch_groups = []
        
        for group_num in range(groups_needed):
            group_name = f"{self.config['base_name']} {group_num + 1}"
            
            # Seleciona leads para este grupo
            start_idx = group_num * self.config['max_members']
            end_idx = min(start_idx + self.config['max_members'], len(leads))
            group_leads = leads[start_idx:end_idx]
            
            # Todos os administradores v√£o para todos os grupos
            group_admins = admins.copy()
            
            batch_groups.append({
                'group_name': group_name,
                'leads': group_leads,
                'admins': group_admins,
                'total_members': len(group_leads) + len(group_admins),
                'session': math.ceil((group_num + 1) / self.config['max_groups_per_session'])
            })
        
        logger.info(f"üìã Grupos organizados em lotes com prote√ß√£o anti-ban:")
        for i, group in enumerate(batch_groups, 1):
            logger.info(f"   Grupo {i}: {group['group_name']} - {len(group['leads'])} leads + {len(group['admins'])} admins = {group['total_members']} total (Sess√£o {group['session']})")
        
        return batch_groups
    
    async def start_browser(self):
        """Inicia o navegador e abre o WhatsApp Web com prote√ß√£o anti-ban"""
        try:
            logger.info("üåê Iniciando navegador com prote√ß√£o anti-ban...")
            
            self.playwright = await async_playwright().start()
            self.browser = await self.playwright.chromium.launch(
                headless=False,
                args=[
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor',
                    '--disable-background-timer-throttling',
                    '--disable-backgrounding-occluded-windows',
                    '--disable-renderer-backgrounding'
                ]
            )
            
            context = await self.browser.new_context(
                viewport={'width': 1366, 'height': 768},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            )
            
            self.page = await context.new_page()
            
            # Simula comportamento humano
            await self.page.goto('https://web.whatsapp.com', wait_until='networkidle')
            await asyncio.sleep(random.uniform(3, 5))
            
            logger.info("üì± Aguardando login no WhatsApp Web...")
            logger.info("   üîç Escaneie o QR Code com seu celular")
            
            # Aguarda at√© que a p√°gina principal carregue (indicando login bem-sucedido)
            try:
                await self.page.wait_for_selector('[data-testid="chat-list"]', timeout=300000)  # 5 minutos
                logger.info("‚úÖ Login realizado com sucesso!")
            except:
                await self.page.wait_for_selector('div[data-testid="chat-list"]', timeout=180000)
                logger.info("‚úÖ Login realizado com sucesso!")
            
            # Aguarda carregamento completo com delay humanizado
            await asyncio.sleep(random.uniform(5, 8))
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar navegador: {e}")
            return False
    
    async def check_connection(self):
        """Verifica se a conex√£o com WhatsApp Web ainda est√° ativa"""
        try:
            # Verifica se ainda est√° na p√°gina do WhatsApp e logado
            chat_list = await self.page.query_selector('[data-testid="chat-list"]')
            if chat_list:
                return True
            
            # Verifica se apareceu QR Code (desconectado)
            qr_code = await self.page.query_selector('[data-testid="qr-code"]')
            if qr_code:
                logger.warning("‚ö†Ô∏è  Conex√£o perdida - QR Code detectado")
                self.connection_lost = True
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar conex√£o: {e}")
            return False
    
    async def create_group(self, group_name):
        """Cria um novo grupo no WhatsApp"""
        try:
            logger.info(f"üë• Criando grupo: {group_name}")
            
            # Verifica conex√£o antes de prosseguir
            if not await self.check_connection():
                raise Exception("Conex√£o com WhatsApp perdida")
            
            # Clica no menu de op√ß√µes (tr√™s pontos)
            menu_selectors = [
                '[data-testid="menu"]',
                'div[title="Menu"]',
                'span[data-testid="menu"]',
                'div[aria-label="Menu"]'
            ]
            
            menu_clicked = False
            for selector in menu_selectors:
                try:
                    await self.page.wait_for_selector(selector, timeout=10000)
                    await self.page.click(selector)
                    menu_clicked = True
                    break
                except:
                    continue
            
            if not menu_clicked:
                raise Exception("N√£o foi poss√≠vel encontrar o menu")
            
            await asyncio.sleep(random.uniform(1, 2))
            
            # Clica em "Novo grupo"
            new_group_selectors = [
                'div[role="button"]:has-text("Novo grupo")',
                'li:has-text("Novo grupo")',
                'div:has-text("New group")',
                '[data-testid="new-group"]'
            ]
            
            group_clicked = False
            for selector in new_group_selectors:
                try:
                    await self.page.click(selector)
                    group_clicked = True
                    break
                except:
                    continue
            
            if not group_clicked:
                raise Exception("N√£o foi poss√≠vel encontrar 'Novo grupo'")
            
            await asyncio.sleep(random.uniform(2, 3))
            
            # Aguarda a tela de sele√ß√£o de contatos aparecer
            await self.page.wait_for_selector('input[data-testid="contact-list-search"]', timeout=15000)
            logger.info(f"‚úÖ Tela de cria√ß√£o de grupo aberta para: {group_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar grupo {group_name}: {e}")
            return False
    
    async def search_and_add_contact(self, contact, attempt=1):
        """Pesquisa e adiciona um contato ao grupo com m√∫ltiplas tentativas"""
        max_attempts = 3
        
        try:
            # Verifica conex√£o
            if not await self.check_connection():
                raise Exception("Conex√£o com WhatsApp perdida")
            
            # Limpa a caixa de pesquisa
            search_box = await self.page.wait_for_selector('input[data-testid="contact-list-search"]', timeout=10000)
            await search_box.click()
            await search_box.fill('')
            await asyncio.sleep(random.uniform(0.5, 1))
            
            # Pesquisa pelo nome ou n√∫mero
            search_term = contact.get('nome', '') or contact['numero']
            await search_box.type(search_term, delay=random.randint(50, 150))
            await asyncio.sleep(random.uniform(2, 4))  # Aguarda resultados da pesquisa
            
            # Tenta encontrar o contato nos resultados
            contact_selectors = [
                f'div[data-testid="cell-frame-container"]:has-text("{contact.get("nome", "")}")',
                f'div[data-testid="cell-frame-container"]:has-text("{contact["numero"]}")',
                'div[data-testid="cell-frame-container"]:first-child'
            ]
            
            contact_found = False
            for selector in contact_selectors:
                try:
                    if contact.get('nome') and selector.find(contact['nome']) != -1:
                        await self.page.wait_for_selector(selector, timeout=5000)
                        await self.page.click(selector)
                        contact_found = True
                        break
                except:
                    continue
            
            if not contact_found:
                # Tenta clicar no primeiro resultado dispon√≠vel
                try:
                    await self.page.click('div[data-testid="cell-frame-container"]:first-child')
                    contact_found = True
                except:
                    pass
            
            if contact_found:
                # Delay humanizado entre adi√ß√µes
                delay = random.uniform(self.config['delay']['min'], self.config['delay']['max'])
                await asyncio.sleep(delay)
                logger.info(f"‚úÖ Contato adicionado: {contact.get('nome', 'Sem nome')} ({contact['numero']})")
                return True
            else:
                if attempt < max_attempts:
                    logger.warning(f"‚ö†Ô∏è  Tentativa {attempt} falhou para {contact.get('nome', 'Sem nome')}, tentando novamente...")
                    await asyncio.sleep(random.uniform(2, 3))
                    return await self.search_and_add_contact(contact, attempt + 1)
                else:
                    logger.warning(f"‚ö†Ô∏è  Contato n√£o encontrado ap√≥s {max_attempts} tentativas: {contact.get('nome', 'Sem nome')} ({contact['numero']})")
                    return False
                
        except Exception as e:
            if attempt < max_attempts:
                logger.warning(f"‚ö†Ô∏è  Erro na tentativa {attempt} para {contact.get('nome', 'Sem nome')}: {e}")
                await asyncio.sleep(random.uniform(3, 5))
                return await self.search_and_add_contact(contact, attempt + 1)
            else:
                logger.error(f"‚ùå Erro final ao adicionar {contact.get('nome', 'Sem nome')}: {e}")
                return False
    
    async def finalize_group_creation(self, group_name):
        """Finaliza a cria√ß√£o do grupo com nome"""
        try:
            # Verifica conex√£o
            if not await self.check_connection():
                raise Exception("Conex√£o com WhatsApp perdida")
            
            # Clica no bot√£o de pr√≥ximo/avan√ßar
            next_selectors = [
                '[data-testid="next-button"]',
                'div[role="button"]:has-text("Avan√ßar")',
                'div[role="button"]:has-text("Next")',
                'button:has-text("Avan√ßar")'
            ]
            
            next_clicked = False
            for selector in next_selectors:
                try:
                    await self.page.click(selector)
                    next_clicked = True
                    break
                except:
                    continue
            
            if not next_clicked:
                raise Exception("N√£o foi poss√≠vel encontrar bot√£o 'Avan√ßar'")
            
            await asyncio.sleep(random.uniform(2, 3))
            
            # Define o nome do grupo
            name_input_selectors = [
                'input[data-testid="group-subject-input"]',
                'div[data-testid="group-subject-input"]',
                'input[placeholder*="nome"]',
                'input[placeholder*="subject"]'
            ]
            
            name_input = None
            for selector in name_input_selectors:
                try:
                    name_input = await self.page.wait_for_selector(selector, timeout=10000)
                    break
                except:
                    continue
            
            if not name_input:
                raise Exception("N√£o foi poss√≠vel encontrar campo de nome do grupo")
            
            await name_input.click()
            await name_input.fill('')
            await name_input.type(group_name, delay=random.randint(100, 200))
            await asyncio.sleep(random.uniform(1, 2))
            
            # Clica em criar grupo
            create_selectors = [
                '[data-testid="create-group-button"]',
                'div[role="button"]:has-text("Criar")',
                'div[role="button"]:has-text("Create")',
                'button:has-text("Criar")'
            ]
            
            create_clicked = False
            for selector in create_selectors:
                try:
                    await self.page.click(selector)
                    create_clicked = True
                    break
                except:
                    continue
            
            if not create_clicked:
                raise Exception("N√£o foi poss√≠vel encontrar bot√£o 'Criar'")
            
            await asyncio.sleep(random.uniform(5, 8))  # Aguarda cria√ß√£o do grupo
            
            logger.info(f"‚úÖ Grupo '{group_name}' criado com sucesso!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao finalizar cria√ß√£o do grupo: {e}")
            return False
    
    async def send_welcome_message(self, group_name):
        """Envia mensagem de boas-vindas para o grupo"""
        try:
            if not self.config['welcome_message'].strip():
                return True
            
            # Verifica conex√£o
            if not await self.check_connection():
                raise Exception("Conex√£o com WhatsApp perdida")
            
            logger.info(f"üí¨ Enviando mensagem de boas-vindas para {group_name}")
            
            # Localiza a caixa de texto
            message_selectors = [
                '[data-testid="conversation-compose-box-input"]',
                'div[contenteditable="true"][data-tab="10"]',
                'div[contenteditable="true"]'
            ]
            
            message_box = None
            for selector in message_selectors:
                try:
                    message_box = await self.page.wait_for_selector(selector, timeout=10000)
                    break
                except:
                    continue
            
            if not message_box:
                logger.warning(f"‚ö†Ô∏è  N√£o foi poss√≠vel encontrar caixa de mensagem para {group_name}")
                return False
            
            # Digita a mensagem
            await message_box.click()
            await message_box.type(self.config['welcome_message'], delay=random.randint(50, 100))
            await asyncio.sleep(random.uniform(1, 2))
            
            # Envia a mensagem
            await self.page.keyboard.press('Enter')
            await asyncio.sleep(random.uniform(2, 3))
            
            logger.info(f"‚úÖ Mensagem de boas-vindas enviada para {group_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar mensagem de boas-vindas: {e}")
            return False
    
    async def promote_to_admin(self, contact, group_name):
        """Promove um contato a administrador"""
        try:
            # Verifica conex√£o
            if not await self.check_connection():
                raise Exception("Conex√£o com WhatsApp perdida")
            
            logger.info(f"üëë Promovendo {contact.get('nome', 'Sem nome')} a administrador em {group_name}...")
            
            # Abre info do grupo
            info_selectors = [
                '[data-testid="conversation-info-header"]',
                'header[data-testid="conversation-header"]',
                'div[data-testid="conversation-info-header"]'
            ]
            
            info_clicked = False
            for selector in info_selectors:
                try:
                    await self.page.click(selector)
                    info_clicked = True
                    break
                except:
                    continue
            
            if not info_clicked:
                raise Exception("N√£o foi poss√≠vel abrir informa√ß√µes do grupo")
            
            await asyncio.sleep(random.uniform(2, 3))
            
            # Procura pelo contato na lista de participantes
            search_term = contact.get('nome', '') or contact['numero']
            participant_selectors = [
                f'div:has-text("{search_term}")',
                f'span:has-text("{search_term}")',
                f'div[title="{search_term}"]'
            ]
            
            participant_found = False
            for selector in participant_selectors:
                try:
                    await self.page.click(selector)
                    participant_found = True
                    break
                except:
                    continue
            
            if not participant_found:
                logger.warning(f"‚ö†Ô∏è  Participante n√£o encontrado para promo√ß√£o: {search_term}")
                return False
            
            await asyncio.sleep(random.uniform(1, 2))
            
            # Clica em "Tornar administrador"
            admin_selectors = [
                'div[role="button"]:has-text("Tornar administrador")',
                'div[role="button"]:has-text("Make admin")',
                'li:has-text("Tornar administrador")'
            ]
            
            admin_clicked = False
            for selector in admin_selectors:
                try:
                    await self.page.click(selector)
                    admin_clicked = True
                    break
                except:
                    continue
            
            if not admin_clicked:
                logger.warning(f"‚ö†Ô∏è  N√£o foi poss√≠vel promover {search_term}")
                return False
            
            await asyncio.sleep(random.uniform(1, 2))
            
            # Volta para o chat
            back_selectors = [
                '[data-testid="back"]',
                'button[aria-label="Voltar"]',
                'div[role="button"][aria-label="Back"]'
            ]
            
            for selector in back_selectors:
                try:
                    await self.page.click(selector)
                    break
                except:
                    continue
            
            await asyncio.sleep(random.uniform(1, 2))
            
            logger.info(f"‚úÖ {contact.get('nome', 'Sem nome')} promovido a administrador")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao promover {contact.get('nome', 'Sem nome')}: {e}")
            return False
    
    async def process_single_group(self, group_data, group_index, total_groups):
        """Processa um √∫nico grupo da automa√ß√£o com prote√ß√£o anti-ban"""
        group_name = group_data['group_name']
        leads = group_data['leads']
        admins = group_data['admins']
        
        report = {
            'group_name': group_name,
            'members_added': [],
            'admins_promoted': [],
            'errors': [],
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'total_members': len(leads) + len(admins),
            'welcome_message_sent': False,
            'session_id': self.session_id
        }
        
        logger.info(f"üìã Processando grupo {group_index}/{total_groups}: {group_name}")
        logger.info(f"   üë• {len(leads)} leads + {len(admins)} administradores = {report['total_members']} total")
        
        try:
            # Salva backup antes de come√ßar o grupo
            self.save_backup(group_index, 0)
            
            # Cria o grupo
            if not await self.create_group(group_name):
                error_msg = 'Falha ao criar grupo'
                report['errors'].append({'contact': {'nome': 'N/A', 'numero': 'N/A'}, 'error': error_msg})
                self.reports.append(report)
                return report
            
            # Adiciona leads primeiro
            logger.info(f"üë• Adicionando {len(leads)} leads...")
            for i, lead in enumerate(leads, 1):
                logger.info(f"   Adicionando lead {i}/{len(leads)}: {lead.get('nome', 'Sem nome')}")
                
                if await self.search_and_add_contact(lead):
                    report['members_added'].append(lead)
                else:
                    report['errors'].append({
                        'contact': lead,
                        'error': 'Lead n√£o encontrado ou erro ao adicionar'
                    })
                
                # Salva backup a cada 10 contatos
                if i % 10 == 0:
                    self.save_backup(group_index, i)
            
            # Adiciona administradores
            logger.info(f"üëë Adicionando {len(admins)} administradores...")
            for i, admin in enumerate(admins, 1):
                logger.info(f"   Adicionando admin {i}/{len(admins)}: {admin.get('nome', 'Sem nome')}")
                
                if await self.search_and_add_contact(admin):
                    report['members_added'].append(admin)
                else:
                    report['errors'].append({
                        'contact': admin,
                        'error': 'Administrador n√£o encontrado ou erro ao adicionar'
                    })
            
            # Finaliza cria√ß√£o do grupo
            if not await self.finalize_group_creation(group_name):
                error_msg = 'Falha ao finalizar grupo'
                report['errors'].append({'contact': {'nome': 'N/A', 'numero': 'N/A'}, 'error': error_msg})
                self.reports.append(report)
                return report
            
            # Envia mensagem de boas-vindas
            if await self.send_welcome_message(group_name):
                report['welcome_message_sent'] = True
            
            # Promove administradores
            logger.info(f"üëë Promovendo {len(admins)} administradores...")
            for i, admin in enumerate(admins, 1):
                logger.info(f"   Promovendo admin {i}/{len(admins)}: {admin.get('nome', 'Sem nome')}")
                
                if await self.promote_to_admin(admin, group_name):
                    report['admins_promoted'].append(admin)
                else:
                    report['errors'].append({
                        'contact': admin,
                        'error': 'Falha ao promover a administrador'
                    })
            
            self.groups_in_current_session += 1
            self.reports.append(report)
            
            # Log do resultado do grupo
            success_rate = ((len(report['members_added']) + len(report['admins_promoted'])) / report['total_members']) * 100
            logger.info(f"üìä Grupo '{group_name}' processado:")
            logger.info(f"   ‚úÖ {len(report['members_added'])} membros adicionados")
            logger.info(f"   üëë {len(report['admins_promoted'])} administradores promovidos")
            logger.info(f"   üí¨ Mensagem de boas-vindas: {'Enviada' if report['welcome_message_sent'] else 'Falhou'}")
            logger.info(f"   ‚ùå {len(report['errors'])} erros")
            logger.info(f"   üìà Taxa de sucesso: {success_rate:.1f}%")
            
            return report
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar grupo {group_name}: {e}")
            report['errors'].append({'contact': {'nome': 'N/A', 'numero': 'N/A'}, 'error': str(e)})
            self.reports.append(report)
            return report
    
    async def process_all_groups(self):
        """Processa todos os grupos da automa√ß√£o com prote√ß√£o anti-ban"""
        self.start_time = datetime.now()
        batch_groups = self.calculate_batch_groups()
        total_groups = len(batch_groups)
        
        logger.info(f"üöÄ Iniciando automa√ß√£o avan√ßada com prote√ß√£o anti-ban:")
        logger.info(f"   üìä {len(self.contacts):,} contatos totais")
        logger.info(f"   üìã {total_groups} grupos para criar")
        logger.info(f"   üîÑ M√°ximo {self.config['max_groups_per_session']} grupos por sess√£o")
        
        current_session = 1
        groups_in_session = 0
        
        for group_index, group_data in enumerate(batch_groups, 1):
            # Verifica se precisa pausar para nova sess√£o
            if self.config['enable_ban_prevention'] and groups_in_session >= self.config['max_groups_per_session']:
                logger.info(f"\nüîÑ PAUSA PARA NOVA SESS√ÉO")
                logger.info(f"   üìä {groups_in_session} grupos criados na sess√£o {current_session}")
                logger.info(f"   ‚è≥ Aguardando 20 minutos para nova sess√£o...")
                logger.info(f"   üí° Recomenda√ß√£o: Fa√ßa login com outro n√∫mero se necess√°rio")
                
                # Pausa de 20 minutos entre sess√µes
                await asyncio.sleep(1200)  # 20 minutos
                
                current_session += 1
                groups_in_session = 0
                self.groups_in_current_session = 0
                
                # Verifica conex√£o ap√≥s pausa
                if not await self.check_connection():
                    logger.warning("‚ö†Ô∏è  Conex√£o perdida ap√≥s pausa. Aguardando reconex√£o...")
                    # Aguarda reconex√£o manual
                    while not await self.check_connection():
                        await asyncio.sleep(30)
                    logger.info("‚úÖ Reconectado! Continuando automa√ß√£o...")
            
            logger.info(f"\n{'='*60}")
            logger.info(f"üîÑ PROCESSANDO GRUPO {group_index}/{total_groups} (Sess√£o {current_session})")
            logger.info(f"{'='*60}")
            
            await self.process_single_group(group_data, group_index, total_groups)
            groups_in_session += 1
            
            # Delay anti-ban entre grupos (exceto no √∫ltimo)
            if group_index < total_groups:
                if self.config['enable_ban_prevention']:
                    delay_time = random.uniform(self.config['group_delay']['min'], self.config['group_delay']['max'])
                    logger.info(f"üõ°Ô∏è  Delay anti-ban: Aguardando {delay_time:.1f} segundos antes do pr√≥ximo grupo...")
                else:
                    delay_time = random.uniform(self.config['delay']['min'], self.config['delay']['max']) * 2
                    logger.info(f"‚è≥ Aguardando {delay_time:.1f} segundos antes do pr√≥ximo grupo...")
                
                await asyncio.sleep(delay_time)
        
        # Calcula tempo total
        total_time = datetime.now() - self.start_time
        logger.info(f"\nüèÅ AUTOMA√á√ÉO AVAN√áADA CONCLU√çDA!")
        logger.info(f"   ‚è±Ô∏è  Tempo total: {total_time}")
        logger.info(f"   üìä {total_groups} grupos processados")
        logger.info(f"   üîÑ {current_session} sess√µes utilizadas")
    
    def generate_advanced_csv_report(self):
        """Gera relat√≥rio CSV detalhado da automa√ß√£o avan√ßada"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_file = f'relatorio_advanced_whatsapp_{timestamp}.csv'
        
        try:
            with open(report_file, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = ['grupo', 'nome', 'numero', 'tipo', 'status', 'erro', 'timestamp', 'mensagem_enviada', 'session_id', 'protecao_antiban']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                
                writer.writeheader()
                
                for report in self.reports:
                    group_name = report['group_name']
                    timestamp = report['timestamp']
                    session_id = report.get('session_id', 'N/A')
                    mensagem_enviada = 'Sim' if report.get('welcome_message_sent', False) else 'N√£o'
                    protecao_antiban = 'Ativada' if self.config['enable_ban_prevention'] else 'Desativada'
                    
                    # Membros adicionados com sucesso
                    for member in report['members_added']:
                        writer.writerow({
                            'grupo': group_name,
                            'nome': member.get('nome', ''),
                            'numero': member['numero'],
                            'tipo': member['tipo'],
                            'status': 'Adicionado',
                            'erro': '',
                            'timestamp': timestamp,
                            'mensagem_enviada': mensagem_enviada,
                            'session_id': session_id,
                            'protecao_antiban': protecao_antiban
                        })
                    
                    # Administradores promovidos
                    for admin in report['admins_promoted']:
                        writer.writerow({
                            'grupo': group_name,
                            'nome': admin.get('nome', ''),
                            'numero': admin['numero'],
                            'tipo': admin['tipo'],
                            'status': 'Promovido a Admin',
                            'erro': '',
                            'timestamp': timestamp,
                            'mensagem_enviada': mensagem_enviada,
                            'session_id': session_id,
                            'protecao_antiban': protecao_antiban
                        })
                    
                    # Erros
                    for error in report['errors']:
                        contact = error['contact']
                        writer.writerow({
                            'grupo': group_name,
                            'nome': contact.get('nome', '') if isinstance(contact, dict) else '',
                            'numero': contact.get('numero', '') if isinstance(contact, dict) else '',
                            'tipo': contact.get('tipo', '') if isinstance(contact, dict) else '',
                            'status': 'Erro',
                            'erro': error['error'],
                            'timestamp': timestamp,
                            'mensagem_enviada': 'N√£o',
                            'session_id': session_id,
                            'protecao_antiban': protecao_antiban
                        })
            
            logger.info(f"üìÑ Relat√≥rio CSV da automa√ß√£o avan√ßada salvo em: {report_file}")
            return report_file
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar relat√≥rio CSV: {e}")
            return None
    
    def generate_advanced_summary_report(self):
        """Gera relat√≥rio resumido da automa√ß√£o avan√ßada"""
        total_groups = len(self.reports)
        total_members = sum(len(r['members_added']) for r in self.reports)
        total_admins = sum(len(r['admins_promoted']) for r in self.reports)
        total_errors = sum(len(r['errors']) for r in self.reports)
        total_welcome_messages = sum(1 for r in self.reports if r.get('welcome_message_sent', False))
        
        # Calcula estat√≠sticas
        success_rate = (total_members / len(self.contacts)) * 100 if len(self.contacts) > 0 else 0
        
        execution_time = datetime.now() - self.start_time if self.start_time else timedelta(0)
        
        summary = f"""
{'='*80}
üõ°Ô∏è  RELAT√ìRIO FINAL - WHATSAPP ADVANCED AUTOMATION WITH ANTI-BAN
{'='*80}
‚è∞ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
‚è±Ô∏è  Tempo de execu√ß√£o: {execution_time}
üÜî Sess√£o: {self.session_id}

üìä ESTAT√çSTICAS GERAIS:
{'='*40}
üë• Contatos processados: {len(self.contacts):,}
üìã Grupos criados: {total_groups}
‚úÖ Membros adicionados: {total_members:,}
üëë Administradores promovidos: {total_admins}
üí¨ Mensagens de boas-vindas enviadas: {total_welcome_messages}
‚ùå Erros encontrados: {total_errors}

üõ°Ô∏è  PROTE√á√ÉO ANTI-BAN:
{'='*40}
üîß Status: {'Ativada' if self.config['enable_ban_prevention'] else 'Desativada'}
‚è≥ Delays entre grupos: {self.config['group_delay']['min']}-{self.config['group_delay']['max']}s
üìä M√°x grupos por sess√£o: {self.config['max_groups_per_session']}
üîÑ Sess√µes utilizadas: {math.ceil(total_groups / self.config['max_groups_per_session']) if self.config['enable_ban_prevention'] else 1}

üìà TAXAS DE SUCESSO:
{'='*40}
üìä Taxa geral de adi√ß√£o: {success_rate:.1f}%
üí¨ Taxa de mensagens enviadas: {(total_welcome_messages / total_groups * 100) if total_groups > 0 else 0:.1f}%

üìã DETALHES POR GRUPO:
{'='*40}"""
        
        for i, report in enumerate(self.reports, 1):
            group_success = (len(report['members_added']) / report['total_members']) * 100 if report['total_members'] > 0 else 0
            
            summary += f"""
Grupo {i:2d}: {report['group_name']}
  ‚Ä¢ Total planejado: {report['total_members']} membros
  ‚Ä¢ Membros adicionados: {len(report['members_added'])}
  ‚Ä¢ Admins promovidos: {len(report['admins_promoted'])}
  ‚Ä¢ Mensagem de boas-vindas: {'Enviada' if report.get('welcome_message_sent', False) else 'Falhou'}
  ‚Ä¢ Erros: {len(report['errors'])}
  ‚Ä¢ Taxa de sucesso: {group_success:.1f}%
  ‚Ä¢ Criado em: {report['timestamp']}
  ‚Ä¢ Sess√£o: {report.get('session_id', 'N/A')}"""
            
            if report['errors']:
                summary += f"\n  ‚Ä¢ Principais erros:"
                for error in report['errors'][:3]:
                    contact = error['contact']
                    nome = contact.get('nome', 'Sem nome') if isinstance(contact, dict) else 'N/A'
                    numero = contact.get('numero', '') if isinstance(contact, dict) else ''
                    summary += f"\n    - {nome} ({numero}): {error['error']}"
                if len(report['errors']) > 3:
                    summary += f"\n    - ... e mais {len(report['errors']) - 3} erros"
        
        summary += f"""

üéØ RESUMO FINAL:
{'='*40}
‚Ä¢ Automa√ß√£o avan√ßada processou {len(self.contacts):,} contatos
‚Ä¢ Criados {total_groups} grupos com prote√ß√£o anti-banimento
‚Ä¢ {total_members:,} pessoas adicionadas com sucesso
‚Ä¢ {total_admins} administradores promovidos em todos os grupos
‚Ä¢ {total_welcome_messages} mensagens de boas-vindas enviadas
‚Ä¢ Taxa de sucesso geral: {success_rate:.1f}%
‚Ä¢ Prote√ß√£o anti-ban: {'Ativada' if self.config['enable_ban_prevention'] else 'Desativada'}

{'='*80}
"""
        
        # Salva relat√≥rio resumido
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        summary_file = f'resumo_advanced_whatsapp_{timestamp}.txt'
        
        try:
            with open(summary_file, 'w', encoding='utf-8') as f:
                f.write(summary)
            logger.info(f"üìÑ Relat√≥rio resumido da automa√ß√£o avan√ßada salvo em: {summary_file}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar relat√≥rio resumido: {e}")
        
        print(summary)
        return summary
    
    async def run(self, csv_file_path=None):
        """Executa a automa√ß√£o avan√ßada completa"""
        try:
            logger.info("üõ°Ô∏è  Iniciando WhatsApp Advanced Group Automation Tool")
            logger.info("="*80)
            
            # Carrega contatos do CSV se fornecido
            if csv_file_path:
                if not self.load_contacts_from_csv(csv_file_path):
                    logger.error("‚ùå Falha ao carregar contatos do CSV")
                    return
            
            if not self.contacts:
                logger.error("‚ùå Nenhum contato encontrado")
                return
            
            # Verifica se h√° backup para retomar
            backup_data = self.load_backup()
            if backup_data:
                response = input("üìÇ Backup encontrado. Deseja retomar a automa√ß√£o? (s/n): ")
                if response.lower() == 's':
                    self.reports = backup_data.get('reports', [])
                    self.groups_in_current_session = backup_data.get('groups_in_current_session', 0)
                    logger.info("üîÑ Retomando automa√ß√£o do backup...")
            
            # Inicia navegador e faz login
            if not await self.start_browser():
                logger.error("‚ùå Falha ao iniciar navegador")
                return
            
            # Processa todos os grupos com prote√ß√£o anti-ban
            await self.process_all_groups()
            
            # Gera relat√≥rios
            csv_file = self.generate_advanced_csv_report()
            self.generate_advanced_summary_report()
            
            logger.info("‚úÖ Automa√ß√£o avan√ßada conclu√≠da com sucesso!")
            
            if csv_file:
                logger.info(f"üìÑ Relat√≥rios salvos: {csv_file}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro geral na automa√ß√£o avan√ßada: {e}")
        
        finally:
            # Aguarda antes de fechar
            logger.info("‚è≥ Aguardando 15 segundos antes de fechar o navegador...")
            await asyncio.sleep(15)
            
            if self.browser:
                await self.browser.close()
                logger.info("üîí Navegador fechado")
            
            if self.playwright:
                await self.playwright.stop()

# Fun√ß√£o principal
async def main():
    print("üõ°Ô∏è  WhatsApp Advanced Group Automation Tool")
    print("="*80)
    print("Ferramenta avan√ßada com prote√ß√£o anti-banimento")
    print("Desenvolvido com Playwright + Python")
    print("="*80)
    
    # Solicita arquivo CSV
    csv_file = input("üìÅ Digite o caminho do arquivo CSV (ou pressione Enter para usar 'contatos.csv'): ").strip()
    if not csv_file:
        csv_file = 'contatos.csv'
    
    if not os.path.exists(csv_file):
        print(f"‚ùå Arquivo n√£o encontrado: {csv_file}")
        print("üìù Crie um arquivo CSV com as colunas: nome,numero,tipo")
        print("   Exemplo: Jo√£o Silva,5562999999999,lead")
        return
    
    # Configura√ß√µes opcionais
    print("\nüîß Configura√ß√µes (pressione Enter para usar padr√µes):")
    
    base_name = input("üìã Nome base dos grupos (padr√£o: 'Grupo VIP'): ").strip()
    if base_name:
        automation.config['base_name'] = base_name
    
    enable_ban_prevention = input("üõ°Ô∏è  Ativar prote√ß√£o anti-ban? (s/N): ").strip().lower()
    if enable_ban_prevention == 's':
        automation.config['enable_ban_prevention'] = True
        
        max_groups = input("üìä M√°ximo de grupos por sess√£o (padr√£o: 10): ").strip()
        if max_groups.isdigit():
            automation.config['max_groups_per_session'] = int(max_groups)
    
    welcome_msg = input("üí¨ Mensagem de boas-vindas (pressione Enter para usar padr√£o): ").strip()
    if welcome_msg:
        automation.config['welcome_message'] = welcome_msg
    
    automation = WhatsAppAdvancedAutomation()
    await automation.run(csv_file)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Automa√ß√£o avan√ßada interrompida pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro fatal na automa√ß√£o avan√ßada: {e}")
        input("Pressione Enter para sair...")